package ggc;

import java.io.Serializable;
import java.io.IOException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

import ggc.exceptions.BadEntryException;
import ggc.exceptions.PartnerAlreadyExistsException;
import ggc.exceptions.PartnerDoesNotExistException;
import ggc.exceptions.ProductDoesNotExistException;
import ggc.exceptions.InsuficientStockException;
import ggc.exceptions.NoRecipeException;
import ggc.exceptions.InvalidTransactionIDException;

/**
 * Class Warehouse implements a warehouse.
 */
public class Warehouse implements Serializable {

  /** Serial number for serialization. */
  private static final long serialVersionUID = 202110282338L;
  
  private Integer _date = 0;

  private LinkedList<Partner> _partners = new LinkedList<>();
  private TreeMap<Product, TreeSet<Batch>> _stock = new TreeMap<>();
  private TransactionManager _transactionManager = new TransactionManager();
  private double _availableBalance = 0;
  private double _accountingBalance = 0;
  private int _transactionID = 0;

  public double getAvailableBalance() {
    return _availableBalance;
  }

  public void updateAvailableBalance(double increment) {
    _availableBalance += increment;
  }

  public double getAccountingBalance() {
    return _accountingBalance;
  }

  public void updateAccountingBalance(double increment) {
    _accountingBalance += increment;
  }

  public int getTransactionID() {
    return _transactionID;
  }
  
  public void incrementTransactionID() {
    _transactionID++;
  }

  /**
   *
   * @param id product ID
   * @return returns the product of the _stock whose ID matches the given argument, null otherwise
   */
  public Product getProduct(String id) {
    Set<Product> products = _stock.keySet();
    for (Product p : products) {
      if (p.getName().toUpperCase().equals(id.toUpperCase())) {
        return p;
      }
    }
    return null;
  }


  public void addProduct(String id, double price, int amount) {
    Product p = new Product(id, price, amount);
    //?B melhor criar em treeset para espeficicar que o argumento eh batch?? ou crio assim
    _stock.put(p, new TreeSet<>());
  }


  //?B da para juntar as addProduct e addDerivedProduct ??
  public void addDerivedProduct(String id, double price, int amount, HashMap<String, Integer> _inProducts, double alpha) {
    Product p = new DerivedProduct(id, price, amount, new Recipe(_inProducts, alpha));
    //?B melhor criar em treeset para espeficicar que o argumento eh batch?? ou crio assim
    _stock.put(p, new TreeSet<>());
  }



  public void registerAcquisition(String partnerID, String productID, double price, int amount) {
    Product product = getProduct(productID);
    
    // add new batch of the product to the tree set
    addBatch(product, new Batch(product, partnerID, amount, price));
    Partner partner = findPartner(partnerID);
    Acquisition acquisition = new Acquisition(getDate(), partner, product, amount, price * amount);
    acquisition.setId(getTransactionID());
    incrementTransactionID();
    _transactionManager.addAcquisitionTransaction(acquisition);
    updateAccountingBalance(-price * amount);
    updateAvailableBalance(-price * amount);
  }


  public String getTransactionString(int id) throws InvalidTransactionIDException {
    return _transactionManager.getTransaction(id).accept(new ToStringDisplay());
  }

  public Product findProduct(String productID) {
    for (Product p : _stock.keySet()) {
      if (p.getName().toUpperCase().equals(productID.toUpperCase())) {
        return p;
      }
    }
    return null;
  }

  public Recipe getRecipeFromProductKey(Product productKey) throws NoRecipeException {
    for (Product p : _stock.keySet()) {
      if (p.equals(productKey)) {
        return p.getRecipe();
      }
    }
    return null;
  }

  public float getPriceAndUpdateStock(TreeSet<Batch> batches, Product product, int amount) {
    float price = 0;

    product.updateTotalStock(-amount);
    for (Batch b : batches) {
      if (amount > 0) {
        int batchRemainingUnits = b.getRemainingUnits();
        if (amount > batchRemainingUnits) {
          price += amount * b.getPriceUnit();
          _stock.get(product).remove(b);
          amount -= batchRemainingUnits;
        } else if (amount < batchRemainingUnits) {
          price += amount * b.getPriceUnit();
          b.updateBatch(-amount);
          amount = 0;
        } else {
          price += amount * b.getPriceUnit();
          _stock.get(product).remove(b);
          amount = 0;
        }
      }
    }
    return price;
  }

  public int canManufacture(HashMap<Product, Integer> components) {
    int max = Integer.MAX_VALUE;
    for (Product p : components.keySet()) {
      int productStock = findProduct(p.getName()).getTotalStock();
      if (productStock < components.get(p)) {
        if (max > productStock) {
          max = productStock;
        }
      }
    }
    return max;
  }

  public void registerSale(String partnerID, int deadline, String productID, int amount) 
    throws InsuficientStockException, PartnerDoesNotExistException, ProductDoesNotExistException {

    Partner partner = findPartner(partnerID);
    Product product = findProduct(productID);
    if (partner == null) throw new PartnerDoesNotExistException(partnerID);
    if (product == null) throw new ProductDoesNotExistException(productID);
    Sale sale = new Sale(_date + deadline, amount);
    int availableStock = product.getTotalStock();
    float price = 0;
    TreeSet<Batch> batches = new TreeSet<>(new Comparator<Batch>(){
        @Override
        public int compare(Batch b1, Batch b2) {
          return Double.compare(b1.getPriceUnit(), b2.getPriceUnit());
        }
      });
    batches.addAll(_stock.get(product));

    if (amount <= availableStock) {
      price = getPriceAndUpdateStock(batches, product, amount);
    } else {
      try {
        HashMap<Product, Integer> components = product.getRecipe().getComponentsProportional(amount-availableStock);
        float productionCost = 0;
        int manufacturePower = canManufacture(components);
        if (manufacturePower >= amount - availableStock) {
          if (availableStock != 0) {
            price = getPriceAndUpdateStock(batches, product, availableStock);
            amount -= availableStock;
          }
          for (Product p : components.keySet()) {
            productionCost += getPriceAndUpdateStock(batches, findProduct(p.getName()), components.get(p));
          }
          productionCost *= product.getRecipe().getProductionCost();
          price += productionCost;
        } else {
          throw new InsuficientStockException(productID, amount, product.getTotalStock() + manufacturePower);
        }
      } catch (NoRecipeException e) {
        throw new InsuficientStockException(productID, amount, product.getTotalStock());
      }
    }
    sale.setPartner(partner);
    sale.setProduct(product);
    sale.setPrice(price);
    sale.setId(getTransactionID());
    incrementTransactionID();
    _transactionManager.addSaleTransaction(sale);
    updateAccountingBalance(price);
  }

  public LinkedList<Transaction> getPaymentsByPartner(String partnerID) throws PartnerDoesNotExistException {
    Partner partner = findPartner(partnerID);
    if (partner != null) {
      return _transactionManager.getPaymentsByPartner(partner);
    } else {
      throw new PartnerDoesNotExistException(partnerID);
    }
  }

  // bruno
  /**
   *
   * @param p product
   * @param price price per unit of the product's batch to be added
   */
  public void updateBatchMaxMinPrices(Product p, double price) {
    if (price > p.getMaxPrice()) {
      p.setMaxPrice(price);
    }
    if (price < p.getLowestPrice()) {
      p.setLowestPrice(price);
    }
  }

  /**
   *
   * @param p product
   * @param b first batch to be added to sector
   */
  public void addBatch(Product p, Batch b) {
    //@sereno devia ser binary search porque em principio isto está ordenado alfabeticamente
    // mas o Collections.binarySearch não funciona para sets.
    for (Product key : _stock.keySet()) { 
      if (key.equals(p)) {
        // bruno (funcao auxiliar para poder ser usada noutros contextos de batches)
        updateBatchMaxMinPrices(key, b.getPriceUnit());
        key.updateTotalStock(b.getRemainingUnits());
        b.setProduct(key);
        _stock.get(key).add(b);
        return;
      }
    }
    TreeSet<Batch> batches = new TreeSet<>();
    b.setProduct(p);
    batches.add(b);
    _stock.put(p, batches);
  }

  /**
   *
   * @param line array of strings with batch information
   */
  public void registerBatch(String[] line) {
    Batch b = new Batch(null, line[2], Integer.parseInt(line[4]), Integer.parseInt(line[3]));
    Product key;

    /* Simple Product */
    if (line.length == 5) {
      key = new Product(line[1], 
        Float.parseFloat(line[3]),
        Integer.parseInt(line[4]));
    }
    /* Derived Product */
    else {
      key = new DerivedProduct(line[1], 
          Float.parseFloat(line[3]), 
          Integer.parseInt(line[4]), 
          new Recipe(createRecipeList(line[6]), 
          Double.parseDouble(line[5])));
    }
    addBatch(key, b);
  }

  /**
   *
   * @param recipeStr string containing products and their quantities info
   * @return map with key as product ID and value as its quantity
   */
  public HashMap<String, Integer> createRecipeList(String recipeStr) {
    String[] arrComponents = recipeStr.split("#");
    HashMap<String, Integer> productList = new HashMap<>();
    for (String c : arrComponents) {
      String[] arrComponent = c.split(":");
      productList.put(arrComponent[0], Integer.parseInt(arrComponent[1]));
    }
    return productList;
  }

  /** Partner related methods */
  /**
   *
   * @param id partner ID
   * @return true if partner with given ID exists, false otherwise //@sereno alterei a função
   */
  public Partner findPartner(String id) {
    for (Partner p : _partners) {
      if (p.getId().toUpperCase().equals(id.toUpperCase())) {
        return p;
      }
    }
    return null;
  }

  /**
   *
   * @param partnerID partner ID
   * @return partner whose ID is given as argument
   * @throws PartnerDoesNotExistException if there is no partner registered with given ID
   */
  public Partner getPartner(String partnerID) throws PartnerDoesNotExistException {
    for (Partner p : _partners) {
      if (p.getId().equalsIgnoreCase(partnerID)) {
        return p;
      }
    }
    throw new PartnerDoesNotExistException(partnerID); // ?
  }

  /**
   *
   * @return list of warehouse partners
   */
  public LinkedList<Partner> getPartners() {
    Collections.sort(_partners);
    return _partners;
  }

  /**
   *
   * @param id partner ID
   * @param name partner name
   * @param address partner address
   * @throws PartnerAlreadyExistsException if exists a partner registered with the given ID
   */
  public void registerPartner(String id, String name, String address) throws PartnerAlreadyExistsException {
    if (findPartner(id) != null){
      throw new PartnerAlreadyExistsException(id);
    } else {
      _partners.add(new Partner(id, name, address));
    }
  }


  // Notifies product if condition is met (for existing products only)
  /**
   *
   * @param productID product's ID
   * @param price new product's batch price
   */
  public void verifyNotificationConditions(String productID, Double price) {
    Product p = findProduct(productID);
    if (p != null) {
      if (p.getTotalStock() == 0) { notificatePartners(new New(p)); }
      else if (p.getLowestPrice() > price) { notificatePartners(new Bargain(p)); }
    }
  }


  // Product becomes notifiable to all partners (for new products only)
  public void turnProductNotifiable(String productID) {
    for (Partner p : _partners) {
      p.becomeNotifiable(productID);
    }
  }


  /**
   * Reverts state of the notification toggle
   * 
   * @param partnerID partner ID
   * @param productID product ID
   */
  public void toggleProductNotifications(String partnerID, String productID) {
    for (Partner p : _partners) {
      if (p.getId().equals(partnerID) && p.hasProductToggle(productID)) {
        p.setToggle(productID);
      } else { 
        return; // UnknownProductKeyException
      }
    }
  } 

  public LinkedList<Acquisition> getPartnerAcquisitions(String partnerID) throws PartnerDoesNotExistException {
    Partner partner = findPartner(partnerID);
    if (partner != null) {
      return _transactionManager.getAcquisitionTransactionsByPartner(new Partner(partnerID));
    } else {
      throw new PartnerDoesNotExistException(partnerID);
    }
  }

  /**
   * Adds product notification to partners with toggle on
   *
   * @param notification Notification object
   */
  public void notificatePartners(Notification notification) {
    String productID = notification.getProductID();
    for (Partner p : _partners) {
      if (p.hasProductToggle(productID) && p.getToggleState(productID)) {
        p.addNotification(notification);
      }
    }
  }

  
  /** Date related methods */
  /**
   *
   * @return current date
   */
  public Integer getDate() {
    return _date;
  }
  public void incrementDate(Integer increment) {
    _date += increment;
  }


  /** Product related methods */
  /**
   *
   * @return list of warehouse products
   */
  public ArrayList<Product> getProducts() {
    ArrayList<Product> products = new ArrayList<>(_stock.size());
    products.addAll(_stock.keySet());
    return products;
  }


  public LinkedList<Batch> getBatchesUnderPrice(double priceLimit) {
    LinkedList<Batch> batches = new LinkedList<>();
    for (Product p : _stock.keySet()) {
      if (p.getLowestPrice() < priceLimit) {
        for (Batch b : _stock.get(p)) {
          if (b.getPriceUnit() < priceLimit) {
            batches.add(b);
          }
        }
      }
    }
    return batches;
  }

  /** Batch related methods */
  /**
   *
   * @return list of warehouse batches
   */
  public LinkedList<Batch> getBatches() {
    LinkedList<Batch> batches = new LinkedList<>();

    for (Product key : _stock.keySet()) {
      batches.addAll(_stock.get(key));
    }
    return batches;
  }

  public TreeSet<Batch> getProductBatches(Product key) throws ProductDoesNotExistException {
    if (_stock.containsKey(key)){
      return _stock.get(key);
    } else {
      throw new ProductDoesNotExistException(key.getName());
    }
  }

  public LinkedList<Batch> getPartnerBatches(String partnerID) throws PartnerDoesNotExistException {
    if (findPartner(partnerID) != null) {
      LinkedList<Batch> batches = new LinkedList<>();
      for (Batch b : getBatches()) {
        if (b.getPartnerID().toUpperCase().equals(partnerID.toUpperCase())) {
          batches.add(b);
        } 
      }
      return batches;
    } else {
      throw new PartnerDoesNotExistException(partnerID);
    }
  }

  /**
   *
   * @param txtfile filename to be loaded
   * @throws IOException for file reading failures
   * @throws BadEntryException for unknown import file entries
   * @throws PartnerAlreadyExistsException for duplicate partner id cases
   */
  void importFile(String txtfile) throws IOException, BadEntryException, PartnerAlreadyExistsException {
    try {
      Scanner reader = new Scanner(new File(txtfile));
      while (reader.hasNextLine()) {
        String[] arrLine = reader.nextLine().split("\\|");
        if (arrLine[0].equals("PARTNER")) {
          registerPartner(arrLine[1], arrLine[2], arrLine[3]);
        }
        else {
          registerBatch(arrLine);
        }
      }
      reader.close();
    } catch (FileNotFoundException e) {
      throw new BadEntryException(txtfile);
    }
  }
}